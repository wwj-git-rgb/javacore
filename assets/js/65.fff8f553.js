(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{485:function(t,a,s){"use strict";s.r(a);var e=s(19),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"jvm-垃圾收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm-垃圾收集"}},[t._v("#")]),t._v(" JVM 垃圾收集")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("📦 本文以及示例源码已归档在 "),s("a",{attrs:{href:"https://github.com/dunwu/javacore/",target:"_blank",rel:"noopener noreferrer"}},[t._v("javacore"),s("OutboundLink")],1)])])]),t._v(" "),s("blockquote",[s("p",[t._v("程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。"),s("strong",[t._v("垃圾回收主要是针对 Java 堆和方法区进行")]),t._v("。")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#1-%E5%AF%B9%E8%B1%A1%E6%B4%BB%E7%9D%80%E5%90%97"}},[t._v("1. 对象活着吗")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#11-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95"}},[t._v("1.1. 引用计数算法")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#12-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95"}},[t._v("1.2. 可达性分析算法")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#13-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B"}},[t._v("1.3. 引用类型")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#14-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6"}},[t._v("1.4. 方法区的回收")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#15-finalize"}},[t._v("1.5. finalize()")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#2-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95"}},[t._v("2. 垃圾收集算法")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#21-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%80%A7%E8%83%BD"}},[t._v("2.1. 垃圾收集性能")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#22-%E6%A0%87%E8%AE%B0---%E6%B8%85%E9%99%A4mark-sweep"}},[t._v("2.2. 标记 - 清除（Mark-Sweep）")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#23-%E6%A0%87%E8%AE%B0---%E6%95%B4%E7%90%86mark-compact"}},[t._v("2.3. 标记 - 整理（Mark-Compact）")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#24-%E5%A4%8D%E5%88%B6copying"}},[t._v("2.4. 复制（Copying）")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#25-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86"}},[t._v("2.5. 分代收集")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#3-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"}},[t._v("3. 垃圾收集器")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#31-%E4%B8%B2%E8%A1%8C%E6%94%B6%E9%9B%86%E5%99%A8"}},[t._v("3.1. 串行收集器")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#32-%E5%B9%B6%E8%A1%8C%E6%94%B6%E9%9B%86%E5%99%A8"}},[t._v("3.2. 并行收集器")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#33-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%94%B6%E9%9B%86%E5%99%A8"}},[t._v("3.3. 并发标记清除收集器")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#34-g1-%E6%94%B6%E9%9B%86%E5%99%A8"}},[t._v("3.4. G1 收集器")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#35-%E6%80%BB%E7%BB%93"}},[t._v("3.5. 总结")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#4-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5"}},[t._v("4. 内存分配与回收策略")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#41-minor-gc"}},[t._v("4.1. Minor GC")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#42-full-gc"}},[t._v("4.2. Full GC")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#5-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[t._v("5. 参考资料")])])]),t._v(" "),s("h2",{attrs:{id:"_1-对象活着吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象活着吗"}},[t._v("#")]),t._v(" 1. 对象活着吗")]),t._v(" "),s("h3",{attrs:{id:"_1-1-引用计数算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引用计数算法"}},[t._v("#")]),t._v(" 1.1. 引用计数算法")]),t._v(" "),s("p",[t._v("给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。")]),t._v(" "),s("p",[t._v("两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGC")]),t._v(" objectA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGC")]),t._v(" objectB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        objectA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objectB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        objectB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objectA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("因为循环引用的存在，所以 "),s("strong",[t._v("Java 虚拟机不适用引用计数算法")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-可达性分析算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-可达性分析算法"}},[t._v("#")]),t._v(" 1.2. 可达性分析算法")]),t._v(" "),s("p",[t._v("通过 "),s("strong",[t._v("GC Roots")]),t._v(" 作为起始点进行搜索，JVM 将能够到达到的对象视为"),s("strong",[t._v("存活")]),t._v("，不可达的对象视为"),s("strong",[t._v("死亡")]),t._v("。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-root.png"}}),t._v(" "),s("p",[t._v("可达性分析算法")])]),t._v(" "),s("p",[s("strong",[t._v("可作为 GC Roots 的对象")]),t._v("包括下面几种：")]),t._v(" "),s("ul",[s("li",[t._v("虚拟机栈中引用的对象")]),t._v(" "),s("li",[t._v("本地方法栈中引用的对象（Native 方法）")]),t._v(" "),s("li",[t._v("方法区中，类静态属性引用的对象")]),t._v(" "),s("li",[t._v("方法区中，常量引用的对象")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-引用类型"}},[t._v("#")]),t._v(" 1.3. 引用类型")]),t._v(" "),s("p",[t._v("无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否可被回收都与引用有关。")]),t._v(" "),s("p",[t._v("Java 具有四种强度不同的引用类型。")]),t._v(" "),s("h4",{attrs:{id:"强引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强引用"}},[t._v("#")]),t._v(" 强引用")]),t._v(" "),s("p",[s("strong",[t._v("被强引用（Strong Reference）关联的对象不会被垃圾收集器回收。")])]),t._v(" "),s("p",[t._v("强引用：使用 "),s("code",[t._v("new")]),t._v(" 一个新对象的方式来创建强引用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"软引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#软引用"}},[t._v("#")]),t._v(" 软引用")]),t._v(" "),s("p",[s("strong",[t._v("被软引用（Soft Reference）关联的对象，只有在内存不够的情况下才会被回收。")])]),t._v(" "),s("p",[t._v("软引用：使用 "),s("code",[t._v("SoftReference")]),t._v(" 类来创建软引用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使对象只被软引用关联")]),t._v("\n")])])]),s("h4",{attrs:{id:"弱引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#弱引用"}},[t._v("#")]),t._v(" 弱引用")]),t._v(" "),s("p",[s("strong",[t._v("被弱引用（Weak Reference）关联的对象一定会被垃圾收集器回收，也就是说它只能存活到下一次垃圾收集发生之前。")])]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("WeakReference")]),t._v(" 类来实现弱引用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" wf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("WeakHashMap")]),t._v(" 的 "),s("code",[t._v("Entry")]),t._v(" 继承自 "),s("code",[t._v("WeakReference")]),t._v("，主要用来实现缓存。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("Tomcat 中的 "),s("code",[t._v("ConcurrentCache")]),t._v(" 就使用了 "),s("code",[t._v("WeakHashMap")]),t._v(" 来实现缓存功能。"),s("code",[t._v("ConcurrentCache")]),t._v(" 采取的是分代缓存，经常使用的对象放入 eden 中，而不常用的对象放入 longterm。eden 使用 "),s("code",[t._v("ConcurrentHashMap")]),t._v(" 实现，longterm 使用 "),s("code",[t._v("WeakHashMap")]),t._v("，保证了不常使用的对象容易被回收。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentCache")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" longterm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("longterm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("longterm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("longterm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"虚引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚引用"}},[t._v("#")]),t._v(" 虚引用")]),t._v(" "),s("p",[t._v("又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。")]),t._v(" "),s("p",[s("strong",[t._v("为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。")])]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("PhantomReference")]),t._v(" 来实现虚引用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PhantomReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" pf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PhantomReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_1-4-方法区的回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-方法区的回收"}},[t._v("#")]),t._v(" 1.4. 方法区的回收")]),t._v(" "),s("p",[t._v("因为方法区主要存放永久代对象，而永久代对象的回收率比年轻代差很多，因此在方法区上进行回收性价比不高。")]),t._v(" "),s("p",[t._v("主要是对常量池的回收和对类的卸载。")]),t._v(" "),s("p",[t._v("类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载：")]),t._v(" "),s("ul",[s("li",[t._v("该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。")]),t._v(" "),s("li",[t._v("加载该类的 "),s("code",[t._v("ClassLoader")]),t._v(" 已经被回收。")]),t._v(" "),s("li",[t._v("该类对应的 "),s("code",[t._v("java.lang.Class")]),t._v(" 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。")])]),t._v(" "),s("p",[t._v("可以通过 "),s("code",[t._v("-Xnoclassgc")]),t._v(" 参数来控制是否对类进行卸载。")]),t._v(" "),s("p",[t._v("在大量使用反射、动态代理、CGLib 等字节码框架、动态生成 JSP 以及 OSGi 这类频繁自定义 "),s("code",[t._v("ClassLoader")]),t._v(" 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。")]),t._v(" "),s("h3",{attrs:{id:"_1-5-finalize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-finalize"}},[t._v("#")]),t._v(" 1.5. finalize()")]),t._v(" "),s("p",[s("code",[t._v("finalize()")]),t._v(" 类似 C++ 的析构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此"),s("strong",[t._v("最好不要使用 "),s("code",[t._v("finalize()")])]),t._v("。")]),t._v(" "),s("p",[t._v("当一个对象可被回收时，如果需要执行该对象的 "),s("code",[t._v("finalize()")]),t._v(" 方法，那么就有可能通过在该方法中让对象重新被引用，从而实现自救。")]),t._v(" "),s("h2",{attrs:{id:"_2-垃圾收集算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-垃圾收集算法"}},[t._v("#")]),t._v(" 2. 垃圾收集算法")]),t._v(" "),s("h3",{attrs:{id:"_2-1-垃圾收集性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-垃圾收集性能"}},[t._v("#")]),t._v(" 2.1. 垃圾收集性能")]),t._v(" "),s("p",[t._v("垃圾收集器的性能指标主要有两点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("停顿时间")]),t._v(" - 停顿时间是因为 GC 而导致程序不能工作的时间长度。")]),t._v(" "),s("li",[s("strong",[t._v("吞吐量")]),t._v(" - 吞吐量关注在特定的时间周期内一个应用的工作量的最大值。对关注吞吐量的应用来说长暂停时间是可以接受的。由于高吞吐量的应用关注的基准在更长周期时间上，所以快速响应时间不在考虑之内。")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-标记-清除-mark-sweep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-标记-清除-mark-sweep"}},[t._v("#")]),t._v(" 2.2. 标记 - 清除（Mark-Sweep）")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-mark-sweep.jpg"}})]),t._v(" "),s("p",[t._v("将需要回收的对象进行标记，然后清理掉被标记的对象。")]),t._v(" "),s("p",[t._v("不足：")]),t._v(" "),s("ul",[s("li",[t._v("标记和清除过程效率都不高；")]),t._v(" "),s("li",[t._v("会产生大量不连续的内存碎片，导致无法给大对象分配内存。")])]),t._v(" "),s("h3",{attrs:{id:"_2-3-标记-整理-mark-compact"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-标记-整理-mark-compact"}},[t._v("#")]),t._v(" 2.3. 标记 - 整理（Mark-Compact）")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-mark-compact.jpg"}})]),t._v(" "),s("p",[t._v("让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。")]),t._v(" "),s("p",[t._v("这种做法能够解决内存碎片化的问题，但代价是压缩算法的性能开销。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-复制-copying"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-复制-copying"}},[t._v("#")]),t._v(" 2.4. 复制（Copying）")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-copying.jpg"}})]),t._v(" "),s("p",[t._v("将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。")]),t._v(" "),s("p",[t._v("主要不足是只使用了内存的一半。")]),t._v(" "),s("p",[t._v("现在的商业虚拟机都"),s("strong",[t._v("采用这种收集算法来回收年轻代")]),t._v("，但是并不是将内存划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survior 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1（可以通过参数 "),s("code",[t._v("-XX:SurvivorRatio")]),t._v(" 来调整比例），保证了内存的利用率达到 90 %。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。")]),t._v(" "),s("h3",{attrs:{id:"_2-5-分代收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-分代收集"}},[t._v("#")]),t._v(" 2.5. 分代收集")]),t._v(" "),s("p",[t._v("现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。")]),t._v(" "),s("p",[t._v("一般将 Java 堆分为年轻代和老年代。")]),t._v(" "),s("ul",[s("li",[t._v("年轻代使用："),s("strong",[t._v("复制")]),t._v(" 算法")]),t._v(" "),s("li",[t._v("老年代使用："),s("strong",[t._v("标记 - 清理")]),t._v(" 或者 "),s("strong",[t._v("标记 - 整理")]),t._v(" 算法")])]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-hotspot-heap-structure.png"}})]),t._v(" "),s("h4",{attrs:{id:"新生代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新生代"}},[t._v("#")]),t._v(" 新生代")]),t._v(" "),s("p",[t._v("新生代是大部分对象创建和销毁的区域，在通常的 Java 应用中，绝大部分对象生命周期都是很短暂的。其内部又分为 "),s("code",[t._v("Eden")]),t._v(" 区域，作为对象初始分配的区域；两个 "),s("code",[t._v("Survivor")]),t._v("，有时候也叫 "),s("code",[t._v("from")]),t._v("、"),s("code",[t._v("to")]),t._v(" 区域，被用来放置从 Minor GC 中保留下来的对象。")]),t._v(" "),s("p",[t._v("JVM 会随意选取一个 "),s("code",[t._v("Survivor")]),t._v(" 区域作为 "),s("code",[t._v("to")]),t._v("，然后会在 GC 过程中进行区域间拷贝，也就是将 Eden 中存活下来的对象和 "),s("code",[t._v("from")]),t._v(" 区域的对象，拷贝到这个"),s("code",[t._v("to")]),t._v("区域。这种设计主要是为了防止内存的碎片化，并进一步清理无用对象。")]),t._v(" "),s("p",[t._v("Java 虚拟机会记录 "),s("code",[t._v("Survivor")]),t._v(" 区中的对象一共被来回复制了几次。如果一个对象被复制的次数为 15（对应虚拟机参数 "),s("code",[t._v("-XX:+MaxTenuringThreshold")]),t._v("），那么该对象将被晋升（promote）至老年代。另外，如果单个 "),s("code",[t._v("Survivor")]),t._v(" 区已经被占用了 50%（对应虚拟机参数 "),s("code",[t._v("-XX:TargetSurvivorRatio")]),t._v("），那么较高复制次数的对象也会被晋升至老年代。")]),t._v(" "),s("h4",{attrs:{id:"老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#老年代"}},[t._v("#")]),t._v(" 老年代")]),t._v(" "),s("p",[t._v("放置长生命周期的对象，通常都是从 "),s("code",[t._v("Survivor")]),t._v(" 区域拷贝过来的对象。当然，也有特殊情况，如果对象较大，JVM 会试图直接分配在 "),s("code",[t._v("Eden")]),t._v(" 其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代。")]),t._v(" "),s("h4",{attrs:{id:"永久代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#永久代"}},[t._v("#")]),t._v(" 永久代")]),t._v(" "),s("p",[t._v("这部分就是早期 Hotspot JVM 的方法区实现方式了，储存 Java 类元数据、常量池、Intern 字符串缓存。在 JDK 8 之后就不存在永久代这块儿了。")]),t._v(" "),s("h4",{attrs:{id:"jvm-参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm-参数"}},[t._v("#")]),t._v(" JVM 参数")]),t._v(" "),s("p",[t._v("这里顺便提一下，JVM 允许对堆空间大小、各代空间大小进行设置，以调整 JVM GC。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("配置")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("-Xss")])]),t._v(" "),s("td",[t._v("虚拟机栈大小。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-Xms")])]),t._v(" "),s("td",[t._v("堆空间初始值。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-Xmx")])]),t._v(" "),s("td",[t._v("堆空间最大值。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-Xmn")])]),t._v(" "),s("td",[t._v("新生代空间大小。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-XX:NewSize")])]),t._v(" "),s("td",[t._v("新生代空间初始值。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-XX:MaxNewSize")])]),t._v(" "),s("td",[t._v("新生代空间最大值。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-XX:NewRatio")])]),t._v(" "),s("td",[t._v("新生代与年老代的比例。默认为 2，意味着老年代是新生代的 2 倍。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-XX:SurvivorRatio")])]),t._v(" "),s("td",[t._v("新生代中调整 eden 区与 survivor 区的比例，默认为 8。即 "),s("code",[t._v("eden")]),t._v(" 区为 80% 的大小，两个 "),s("code",[t._v("survivor")]),t._v(" 分别为 10% 的大小。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-XX:PermSize")])]),t._v(" "),s("td",[t._v("永久代空间的初始值。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-XX:MaxPermSize")])]),t._v(" "),s("td",[t._v("永久代空间的最大值。")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾收集器"}},[t._v("#")]),t._v(" 3. 垃圾收集器")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-overview.jpg"}})]),t._v(" "),s("p",[t._v("以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。")]),t._v(" "),s("p",[t._v("注：G1 垃圾收集器既可以回收年轻代内存，也可以回收老年代内存。而其他垃圾收集器只能针对特定代的内存进行回收。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-串行收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-串行收集器"}},[t._v("#")]),t._v(" 3.1. 串行收集器")]),t._v(" "),s("p",[t._v("串行收集器（Serial）是最基本、发展历史最悠久的收集器。")]),t._v(" "),s("p",[t._v("串行收集器是 "),s("strong",[s("code",[t._v("client")]),t._v(" 模式下的默认收集器配置")]),t._v("。因为在客户端模式下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的年轻代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。")]),t._v(" "),s("p",[s("strong",[t._v("串行收集器采用单线程 stop-the-world 的方式进行收集")]),t._v("。当内存不足时，串行 GC 设置停顿标识，待所有线程都进入安全点（Safepoint）时，应用线程暂停，串行 GC 开始工作，"),s("strong",[t._v("采用单线程方式回收空间并整理内存")]),t._v("。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-serial.jpg"}}),t._v(" "),s("p",[t._v("Serial / Serial Old 收集器运行示意图")])]),t._v(" "),s("p",[t._v("单线程意味着复杂度更低、占用内存更少，垃圾回收效率高；但同时也意味着不能有效利用多核优势。事实上，串行收集器特别适合堆内存不高、单核甚至双核 CPU 的场合。")]),t._v(" "),s("h4",{attrs:{id:"serial-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[t._v("#")]),t._v(" Serial 收集器")]),t._v(" "),s("blockquote",[s("p",[t._v("开启选项："),s("code",[t._v("-XX:+UseSerialGC")])]),t._v(" "),s("p",[t._v("打开此开关后，使用 "),s("strong",[t._v("Serial")]),t._v(" + "),s("strong",[t._v("Serial Old")]),t._v(" 收集器组合来进行内存回收。")])]),t._v(" "),s("h4",{attrs:{id:"serial-old-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[t._v("#")]),t._v(" Serial Old 收集器")]),t._v(" "),s("p",[t._v("Serial Old 是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途：")]),t._v(" "),s("ul",[s("li",[t._v("在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。")]),t._v(" "),s("li",[t._v("作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-并行收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-并行收集器"}},[t._v("#")]),t._v(" 3.2. 并行收集器")]),t._v(" "),s("blockquote",[s("p",[t._v("开启选项："),s("code",[t._v("-XX:+UseParallelGC")])]),t._v(" "),s("p",[t._v("打开此开关后，使用 "),s("strong",[t._v("Parallel Scavenge")]),t._v(" + "),s("strong",[t._v("Serial Old")]),t._v(" 收集器组合来进行内存回收。")]),t._v(" "),s("p",[t._v("开启选项："),s("code",[t._v("-XX:+UseParallelOldGC")])]),t._v(" "),s("p",[t._v("打开此开关后，使用 "),s("strong",[t._v("Parallel Scavenge")]),t._v(" + "),s("strong",[t._v("Parallel Old")]),t._v(" 收集器组合来进行内存回收。")])]),t._v(" "),s("p",[t._v("其他收集器都是以关注停顿时间为目标，而"),s("strong",[t._v("并行收集器是以关注吞吐量（Throughput）为目标的垃圾收集器")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验；")]),t._v(" "),s("li",[t._v("而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)\n")])])]),s("p",[s("strong",[t._v("并行收集器是 server 模式下的默认收集器。")])]),t._v(" "),s("p",[t._v("并行收集器与串行收集器工作模式相似，都是 stop-the-world 方式，只是暂停时并行地进行垃圾收集。"),s("strong",[t._v("并行收集器年轻代采用复制算法，老年代采用标记-整理")]),t._v("，在回收的同时还会对内存进行压缩。并行收集器适合对吞吐量要求远远高于延迟要求的场景，并且在满足最差延时的情况下，并行收集器将提供最佳的吞吐量。")]),t._v(" "),s("p",[s("strong",[t._v("在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 收集器 + Parallel Old 收集器。")])]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-parallel.jpg"}}),t._v(" "),s("p",[t._v("Parallel / Parallel Old 收集器运行示意图")])]),t._v(" "),s("h4",{attrs:{id:"parallel-scavenge-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器"}},[t._v("#")]),t._v(" Parallel Scavenge 收集器")]),t._v(" "),s("p",[t._v("Parallel Scavenge 收集器提供了两个参数用于精确控制吞吐量，分别是：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-XX:MaxGCPauseMillis")]),t._v(" - 控制最大垃圾收集停顿时间，收集器将尽可能保证内存回收时间不超过设定值。")]),t._v(" "),s("li",[s("code",[t._v("-XX:GCTimeRatio")]),t._v(" - 直接设置吞吐量大小的（值为大于 0 且小于 100 的整数）。")])]),t._v(" "),s("p",[t._v("缩短停顿时间是以牺牲吞吐量和年轻代空间来换取的：年轻代空间变小，垃圾回收变得频繁，导致吞吐量下降。")]),t._v(" "),s("p",[t._v("Parallel Scavenge 收集器还提供了一个参数 "),s("code",[t._v("-XX:+UseAdaptiveSizePolicy")]),t._v("，这是一个开关参数，打开参数后，就不需要手工指定年轻代的大小（"),s("code",[t._v("-Xmn")]),t._v("）、Eden 和 Survivor 区的比例（"),s("code",[t._v("-XX:SurvivorRatio")]),t._v("）、晋升老年代对象年龄（"),s("code",[t._v("-XX:PretenureSizeThreshold")]),t._v("）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种方式称为 GC 自适应的调节策略（GC Ergonomics）。")]),t._v(" "),s("h4",{attrs:{id:"parallel-old-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[t._v("#")]),t._v(" Parallel Old 收集器")]),t._v(" "),s("p",[t._v("是 Parallel Scavenge 收集器的老年代版本，使用"),s("strong",[t._v("多线程和 “标记-整理” 算法")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-并发标记清除收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-并发标记清除收集器"}},[t._v("#")]),t._v(" 3.3. 并发标记清除收集器")]),t._v(" "),s("blockquote",[s("p",[t._v("开启选项："),s("code",[t._v("-XX:+UseConcMarkSweepGC")])]),t._v(" "),s("p",[t._v("打开此开关后，使用 "),s("strong",[t._v("CMS")]),t._v(" + "),s("strong",[t._v("ParNew")]),t._v(" + "),s("strong",[t._v("Serial Old")]),t._v(" 收集器组合来进行内存回收。")])]),t._v(" "),s("p",[t._v("并发标记清除收集器是以获取最短停顿时间为目标。")]),t._v(" "),s("p",[t._v("开启后，年轻代使用 ParNew 收集器；老年代使用 CMS 收集器，如果 CMS 产生的碎片过多，导致无法存放浮动垃圾，JVM 会出现 "),s("code",[t._v("Concurrent Mode Failure")]),t._v(" ，此时使用 Serial Old 收集器来替代 CMS 收集器清理碎片。")]),t._v(" "),s("h4",{attrs:{id:"cms-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[t._v("#")]),t._v(" CMS 收集器")]),t._v(" "),s("p",[s("strong",[t._v("CMS 收集器是一种以获取最短停顿时间为目标的收集器。")])]),t._v(" "),s("p",[t._v("CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。")]),t._v(" "),s("h5",{attrs:{id:"cms-回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-回收机制"}},[t._v("#")]),t._v(" CMS 回收机制")]),t._v(" "),s("p",[t._v("CMS 收集器运行步骤如下：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("初始标记")]),t._v("：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。")]),t._v(" "),s("li",[s("strong",[t._v("并发标记")]),t._v("：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。")]),t._v(" "),s("li",[s("strong",[t._v("重新标记")]),t._v("：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。")]),t._v(" "),s("li",[s("strong",[t._v("并发清除")]),t._v("：回收在标记阶段被鉴定为不可达的对象。不需要停顿。")])]),t._v(" "),s("p",[t._v("在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-cms.jpg"}}),t._v(" "),s("p",[t._v("CMS 收集器运行示意图")])]),t._v(" "),s("h5",{attrs:{id:"cms-回收年轻代详细步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-回收年轻代详细步骤"}},[t._v("#")]),t._v(" CMS 回收年轻代详细步骤")]),t._v(" "),s("p",[s("strong",[t._v("（1）堆空间被分割为三块空间")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide1.png",alt:"img"}}),t._v("\n年轻代分割成一个 Eden 区和两个 Survivor 区。年老代一个连续的空间。就地完成对象收集。除非有 FullGC 否则不会压缩。")]),t._v(" "),s("p",[s("strong",[t._v("（2）CMS 年轻代垃圾收集如何工作")])]),t._v(" "),s("p",[t._v("年轻代被标为浅绿色，年老代被标记为蓝色。如果你的应用已经运行了一段时间，CMS 的堆看起来应该是这个样子。对象分散在年老代区域里。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide2.png",alt:"img"}})]),t._v(" "),s("p",[t._v("使用 CMS，年老代对象就地释放。它们不会被来回移动。这个空间不会被压缩除非发生 FullGC。")]),t._v(" "),s("p",[s("strong",[t._v("（3）年轻代收集")])]),t._v(" "),s("p",[t._v("从 Eden 和 Survivor 区复制活跃对象到另一个 Survivor 区。所有达到他们的年龄阈值的对象会晋升到年老代。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide3.png",alt:"img"}}),t._v(" "),s("strong",[t._v("（4）年轻代回收之后")])]),t._v(" "),s("p",[t._v("一次年轻代垃圾收集之后，Eden 区和其中一个 Survivor 区被清空。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide4.png",alt:"img"}}),t._v("\n最近晋升的对象以深蓝色显示在上图中，绿色的对象是年轻代幸免的还没有晋升到老年代对象。")]),t._v(" "),s("h5",{attrs:{id:"cms-回收年老代详细步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-回收年老代详细步骤"}},[t._v("#")]),t._v(" CMS 回收年老代详细步骤")]),t._v(" "),s("p",[s("strong",[t._v("（1）CMS 的年老代收集")])]),t._v(" "),s("p",[t._v("发生两次 stop the world 事件：初始标记和重新标记。当年老代达到特定的占用比例时，CMS 开始执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide5.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("初始标记是一个短暂暂停的、可达对象被标记的阶段。")]),t._v(" "),s("li",[t._v("并发标记寻找活跃对象在应用连续执行时。")]),t._v(" "),s("li",[t._v("最后，在重新标记阶段，寻找在之前并发标记阶段中丢失的对象。")])]),t._v(" "),s("p",[s("strong",[t._v("（2）年老代收集-并发清除")])]),t._v(" "),s("p",[t._v("在之前阶段没有被标记的对象会被就地释放。不进行压缩操作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide6.png",alt:"img"}}),t._v("\n**注意：**未被标记的对象等于死亡对象")]),t._v(" "),s("p",[s("strong",[t._v("（3）年老代收集-清除之后")])]),t._v(" "),s("p",[t._v("清除阶段之后，你可以看到大量内存被释放。你还可以注意到没有进行压缩操作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide7.png",alt:"img"}}),t._v("\n最后，CMS 收集器会再次进入重新设置阶段，等待下一次垃圾收集时机的到来。")]),t._v(" "),s("h5",{attrs:{id:"cms-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-特点"}},[t._v("#")]),t._v(" CMS 特点")]),t._v(" "),s("p",[t._v("CMS 收集器具有以下缺点：")]),t._v(" "),s("ul",[s("li",[t._v("并发收集 - 并发指的是用户线程和 GC 线程同时运行。")]),t._v(" "),s("li",[t._v("吞吐量低 - 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。")]),t._v(" "),s("li",[t._v("无法处理浮动垃圾 - 可能出现 "),s("code",[t._v("Concurrent Mode Failure")]),t._v("。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。\n"),s("ul",[s("li",[t._v("可以使用 "),s("code",[t._v("-XX:CMSInitiatingOccupancyFraction")]),t._v(" 来改变触发 CMS 收集器工作的内存占用百分，如果这个值设置的太大，导致预留的内存不够存放浮动垃圾，就会出现 "),s("code",[t._v("Concurrent Mode Failure")]),t._v("，这时虚拟机将临时启用 Serial Old 收集器来替代 CMS 收集器。")])])]),t._v(" "),s("li",[t._v("标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\n"),s("ul",[s("li",[t._v("可以使用 "),s("code",[t._v("-XX:+UseCMSCompactAtFullCollection")]),t._v(" ，用于在 CMS 收集器要进行 Full GC 时开启内存碎片的合并整理，内存整理的过程是无法并发的，空间碎片问题没有了，但是停顿时间不得不变长了。")]),t._v(" "),s("li",[t._v("可以使用 "),s("code",[t._v("-XX:CMSFullGCsBeforeCompaction")]),t._v(" ，用于设置执行多少次不压缩的 Full GC 后，来一次带压缩的（默认为 0，表示每次进入 Full GC 时都要进行碎片整理）。")])])])]),t._v(" "),s("h4",{attrs:{id:"parnew-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[t._v("#")]),t._v(" ParNew 收集器")]),t._v(" "),s("blockquote",[s("p",[t._v("开启选项："),s("code",[t._v("-XX:+UseParNewGC")])])]),t._v(" "),s("p",[t._v("ParNew 收集器其实是 Serial 收集器的多线程版本。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-par-new.jpg"}}),t._v(" "),s("p",[t._v("ParNew 收集器运行示意图")])]),t._v(" "),s("p",[t._v("是 Server 模式下的虚拟机首选年轻代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。")]),t._v(" "),s("p",[t._v("ParNew 收集器也是使用 "),s("code",[t._v("-XX:+UseConcMarkSweepGC")]),t._v(" 后的默认年轻代收集器。")]),t._v(" "),s("p",[t._v("ParNew 收集器默认开启的线程数量与 CPU 数量相同，可以使用 -"),s("code",[t._v("XX:ParallelGCThreads")]),t._v(" 参数来设置线程数。")]),t._v(" "),s("h3",{attrs:{id:"_3-4-g1-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-g1-收集器"}},[t._v("#")]),t._v(" 3.4. G1 收集器")]),t._v(" "),s("blockquote",[s("p",[t._v("开启选项："),s("code",[t._v("-XX:+UseG1GC")])])]),t._v(" "),s("p",[t._v("前面提到的垃圾收集器一般策略是关注吞吐量或停顿时间。而 "),s("strong",[t._v("G1 是一种兼顾吞吐量和停顿时间的 GC 收集器")]),t._v("。G1 是 Oracle JDK9 以后的默认 GC 收集器。G1 可以直观的设定停顿时间的目标，相比于 CMS GC，G1 未必能做到 CMS 在最好情况下的延时停顿，但是最差情况要好很多。")]),t._v(" "),s("p",[t._v("G1 最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至 CMS 的众多缺陷。")]),t._v(" "),s("h4",{attrs:{id:"分代和分区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分代和分区"}},[t._v("#")]),t._v(" 分代和分区")]),t._v(" "),s("p",[t._v("旧的垃圾收集器一般采取分代收集，Java 堆被分为年轻代、老年代和永久代。收集的范围都是整个年轻代或者整个老年代。")]),t._v(" "),s("p",[t._v("G1 取消了永久代，并把年轻代和老年代划分成多个大小相等的独立区域（Region），年轻代和老年代不再物理隔离。G1 可以直接对年轻代和老年代一起回收。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-g1-heap-allocation.png"}})]),t._v(" "),s("p",[t._v("通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。")]),t._v(" "),s("p",[t._v("每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。")]),t._v(" "),s("h4",{attrs:{id:"g1-回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收机制"}},[t._v("#")]),t._v(" G1 回收机制")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javacore/jvm/jvm-gc-g1.jpg"}}),t._v(" "),s("p",[t._v("G1 收集器运行示意图")])]),t._v(" "),s("p",[t._v("如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("初始标记")])]),t._v(" "),s("li",[s("strong",[t._v("并发标记")])]),t._v(" "),s("li",[s("strong",[t._v("最终标记")]),t._v(" - 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。")]),t._v(" "),s("li",[s("strong",[t._v("筛选回收")]),t._v(" - 首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。")])]),t._v(" "),s("p",[t._v("具备如下特点：")]),t._v(" "),s("ul",[s("li",[t._v("空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。")]),t._v(" "),s("li",[t._v("可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。")])]),t._v(" "),s("h4",{attrs:{id:"g1-回收年轻代详细步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收年轻代详细步骤"}},[t._v("#")]),t._v(" G1 回收年轻代详细步骤")]),t._v(" "),s("p",[s("strong",[t._v("（1）G1 初始堆空间")])]),t._v(" "),s("p",[t._v("堆空间是一个被分成许多固定大小区域的内存块。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide8.png",alt:"img"}}),t._v("\nJava 虚拟机启动时选定区域大小。Java 虚拟机通常会指定 2000 个左右的大小相等、每个大小范围在 1 到 32M 的区域。")]),t._v(" "),s("p",[s("strong",[t._v("（2）G1 堆空间分配")])]),t._v(" "),s("p",[t._v("实际上，这些区域被映射成 Eden、Survivor、年老代空间的逻辑表述形式。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide9.png",alt:"img"}}),t._v("\n图片中的颜色表明了哪个区域被关联上什么角色。活跃对象从一个区域疏散（复制、移动）到另一个区域。区域被设计为并行的方式收集，可以暂停或者不暂停所有的其它用户线程。")]),t._v(" "),s("p",[t._v("明显的区域可以被分配成 Eden、Survivor、Old 区域。另外，有第四种类型的区域叫做"),s("em",[t._v("极大区域(Humongous regions)")]),t._v("。这些区域被设计成保持标准区域大小的 50%或者更大的对象。它们被保存在一个连续的区域集合里。最后，最后一个类型的区域就是堆空间里没有使用的区域。")]),t._v(" "),s("p",[t._v("**注意：**写作此文章时，收集极大对象时还没有被优化。因此，你应该避免创建这个大小的对象。")]),t._v(" "),s("p",[s("strong",[t._v("（3）G1 的年轻代")])]),t._v(" "),s("p",[t._v("堆空间被分割成大约 2000 个区域。最小 1M，最大 32M，蓝色区域保持年老代对象，绿色区域保持年轻代对象。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide10.png",alt:"img"}}),t._v("\n**注意：**区域没有必要像旧的收集器一样是保持连续的。")]),t._v(" "),s("p",[s("strong",[t._v("（4）G1 的年轻代收集")])]),t._v(" "),s("p",[t._v("活跃对象会被疏散（复制、移动）到一个或多个 survivor 区域。如果达到晋升总阈值，对象会晋升到年老代区域。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide11.png",alt:"img"}}),t._v("\n这是一个 stop the world 暂停。为下一次年轻代垃圾回收计算 Eden 和 Survivor 的大小。保留审计信息有助于计算大小。类似目标暂停时间的事情会被考虑在内。")]),t._v(" "),s("p",[t._v("这个方法使重调区域大小变得很容易，按需把它们调大或调小。")]),t._v(" "),s("p",[s("strong",[t._v("（5）G1 年轻代回收的尾声")])]),t._v(" "),s("p",[t._v("活跃对象被疏散到 Survivor 或者年老代区域。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide12.png",alt:"img"}}),t._v("\n最近晋升的对象显示为深蓝色。Survivor 区域显示为绿色。")]),t._v(" "),s("p",[t._v("关于 G1 的年轻代回收做以下总结：")]),t._v(" "),s("ul",[s("li",[t._v("堆空间是一块单独的内存空间被分割成多个区域。")]),t._v(" "),s("li",[t._v("年轻代内存是由一组非连续的区域组成。这使得需要重调大小变得容易。")]),t._v(" "),s("li",[t._v("年轻代垃圾回收是 stop the world 事件，所有应用线程都会因此操作暂停。")]),t._v(" "),s("li",[t._v("年轻代垃圾收集使用多线程并行回收。")]),t._v(" "),s("li",[t._v("活跃对象被复制到新的 Survivor 区或者年老代区域。")])]),t._v(" "),s("h4",{attrs:{id:"g1-回收年老代详细步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收年老代详细步骤"}},[t._v("#")]),t._v(" G1 回收年老代详细步骤")]),t._v(" "),s("p",[s("strong",[t._v("（1）初始标记阶段")])]),t._v(" "),s("p",[t._v("年轻代垃圾收集肩负着活跃对象初始标记的任务。在日志文件中被标为"),s("em",[t._v("GC pause (young)(inital-mark)")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide13.png",alt:"img"}}),t._v(" "),s("strong",[t._v("（2）并发标记阶段")])]),t._v(" "),s("p",[t._v("如果发现空区域(“X”标示的)，在重新标记阶段它们会被马上清除掉。当然，决定活性的审计信息也在此时被计算。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide14.png",alt:"img"}}),t._v(" "),s("strong",[t._v("（3）重新标记阶段")])]),t._v(" "),s("p",[t._v("空的区域被清除和回收掉。所有区域的活性在此时计算。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide15.png",alt:"img"}}),t._v(" "),s("strong",[t._v("（4）复制/清理阶段")])]),t._v(" "),s("p",[t._v("G1 选择活性最低的区域，这些区域能够以最快的速度回收。然后这些区域会在年轻代垃圾回收过程中被回收。在日志中被指示为*[GC pause (mixed)]*。所以年轻代和年老代在同一时间被回收。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide16.png",alt:"img"}}),t._v(" "),s("strong",[t._v("（5）复制/清理阶段之后")])]),t._v(" "),s("p",[t._v("被选择的区域已经被回收和压缩到图中显示的深蓝色区和深绿色区中。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/images/slide17.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"_3-5-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-总结"}},[t._v("#")]),t._v(" 3.5. 总结")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("收集器")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("串行/并行/并发")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("年轻代/老年代")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("收集算法")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("目标")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("适用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Serial")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("串行")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("年轻代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("复制")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应速度优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("单 CPU 环境下的 Client 模式")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Serial Old")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("串行")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("老年代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("标记-整理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应速度优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("单 CPU 环境下的 Client 模式、CMS 的后备预案")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("ParNew")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("串行 + 并行")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("年轻代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("复制算法")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应速度优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("多 CPU 环境时在 Server 模式下与 CMS 配合")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Parallel Scavenge")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("串行 + 并行")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("年轻代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("复制算法")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("吞吐量优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("在后台运算而不需要太多交互的任务")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Parallel Old")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("串行 + 并行")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("老年代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("标记-整理")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("吞吐量优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("在后台运算而不需要太多交互的任务")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("CMS")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("并行 + 并发")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("老年代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("标记-清除")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应速度优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("集中在互联网站或 B/S 系统服务端上的 Java 应用")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("G1")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("并行 + 并发")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("年轻代 + 老年代")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("标记-整理 + 复制算法")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应速度优先")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("面向服务端应用，将来替换 CMS")])])])]),t._v(" "),s("h2",{attrs:{id:"_4-内存分配与回收策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-内存分配与回收策略"}},[t._v("#")]),t._v(" 4. 内存分配与回收策略")]),t._v(" "),s("p",[t._v("对象的内存分配，也就是在堆上分配。主要分配在年轻代的 Eden 区上，少数情况下也可能直接分配在老年代中。")]),t._v(" "),s("h3",{attrs:{id:"_4-1-minor-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-minor-gc"}},[t._v("#")]),t._v(" 4.1. Minor GC")]),t._v(" "),s("p",[s("strong",[t._v("当 "),s("code",[t._v("Eden")]),t._v(" 区空间不足时，触发 Minor GC")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("Minor GC 发生在年轻代上")]),t._v("，因为年轻代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。")]),t._v(" "),s("p",[t._v("Minor GC 工作流程：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Java 应用不断创建对象，通常都是分配在 "),s("code",[t._v("Eden")]),t._v(" 区域，当其空间不足时（达到设定的阈值），触发 minor GC。仍然被引用的对象（绿色方块）存活下来，被复制到 JVM 选择的 Survivor 区域，而没有被引用的对象（黄色方块）则被回收。")])]),t._v(" "),s("li",[s("p",[t._v("经过一次 Minor GC，Eden 就会空闲下来，直到再次达到 Minor GC 触发条件。这时候，另外一个 Survivor 区域则会成为 "),s("code",[t._v("To")]),t._v(" 区域，Eden 区域的存活对象和 "),s("code",[t._v("From")]),t._v(" 区域对象，都会被复制到 "),s("code",[t._v("To")]),t._v(" 区域，并且存活的年龄计数会被加 1。")])]),t._v(" "),s("li",[s("p",[t._v("类似第二步的过程会发生很多次，直到有对象年龄计数达到阈值，这时候就会发生所谓的晋升（Promotion）过程，如下图所示，超过阈值的对象会被晋升到老年代。这个阈值是可以通过 "),s("code",[t._v("-XX:MaxTenuringThreshold")]),t._v(" 参数指定。")])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-full-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-full-gc"}},[t._v("#")]),t._v(" 4.2. Full GC")]),t._v(" "),s("p",[s("strong",[t._v("Full GC 发生在老年代上")]),t._v("，老年代对象和年轻代的相反，其存活时间长，因此 Full GC 很少执行，而且执行速度会比 Minor GC 慢很多。")]),t._v(" "),s("h4",{attrs:{id:"内存分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存分配策略"}},[t._v("#")]),t._v(" 内存分配策略")]),t._v(" "),s("p",[s("strong",[t._v("（一）对象优先在 Eden 分配")])]),t._v(" "),s("p",[t._v("大多数情况下，对象在年轻代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC。")]),t._v(" "),s("p",[s("strong",[t._v("（二）大对象直接进入老年代")])]),t._v(" "),s("p",[t._v("大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。")]),t._v(" "),s("p",[t._v("经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。")]),t._v(" "),s("p",[s("code",[t._v("-XX:PretenureSizeThreshold")]),t._v("，大于此值的对象直接在老年代分配，避免在 Eden 区和 Survivor 区之间的大量内存复制。")]),t._v(" "),s("p",[s("strong",[t._v("（三）长期存活的对象进入老年代")])]),t._v(" "),s("p",[t._v("为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。")]),t._v(" "),s("p",[s("code",[t._v("-XX:MaxTenuringThreshold")]),t._v(" 用来定义年龄的阈值。")]),t._v(" "),s("p",[s("strong",[t._v("（四）动态对象年龄判定")])]),t._v(" "),s("p",[t._v("虚拟机并不是永远地要求对象的年龄必须达到 "),s("code",[t._v("MaxTenuringThreshold")]),t._v(" 才能晋升老年代，如果在 Survivor 区中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 "),s("code",[t._v("MaxTenuringThreshold")]),t._v(" 中要求的年龄。")]),t._v(" "),s("p",[s("strong",[t._v("（五）空间分配担保")])]),t._v(" "),s("p",[t._v("在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于年轻代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的；如果不成立的话虚拟机会查看 "),s("code",[t._v("HandlePromotionFailure")]),t._v(" 设置值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC，尽管这次 Minor GC 是有风险的；如果小于，或者 "),s("code",[t._v("HandlePromotionFailure")]),t._v(" 设置不允许冒险，那这时也要改为进行一次 Full GC。")]),t._v(" "),s("h4",{attrs:{id:"full-gc-的触发条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-gc-的触发条件"}},[t._v("#")]),t._v(" Full GC 的触发条件")]),t._v(" "),s("p",[t._v("对于 Minor GC，其触发条件非常简单，当 Eden 区空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：")]),t._v(" "),s("p",[s("strong",[t._v("（1）调用 "),s("code",[t._v("System.gc()")])])]),t._v(" "),s("p",[t._v("此方法的调用是建议虚拟机进行 Full GC，虽然只是建议而非一定，但很多情况下它会触发 Full GC，从而增加 Full GC 的频率，也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存。可通过 "),s("code",[t._v("-XX:DisableExplicitGC")]),t._v(" 来禁止 RMI 调用 "),s("code",[t._v("System.gc()")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("（2）老年代空间不足")])]),t._v(" "),s("p",[t._v("老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等，当执行 Full GC 后空间仍然不足，则抛出 "),s("code",[t._v("java.lang.OutOfMemoryError: Java heap space")]),t._v("。为避免以上原因引起的 Full GC，调优时应尽量做到让对象在 Minor GC 阶段被回收、让对象在年轻代多存活一段时间以及不要创建过大的对象及数组。")]),t._v(" "),s("p",[s("strong",[t._v("（3）方法区空间不足")])]),t._v(" "),s("p",[t._v("JVM 规范中运行时数据区域中的"),s("strong",[t._v("方法区")]),t._v("，在 HotSpot 虚拟机中又被习惯称为"),s("strong",[t._v("永久代")]),t._v("，永久代中存放的是类的描述信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出 "),s("code",[t._v("java.lang.OutOfMemoryError: PermGen space")]),t._v(" 错误。为避免永久代占满造成 Full GC 现象，可采用的方法为增大 Perm Gen 空间或转为使用 CMS GC。")]),t._v(" "),s("p",[s("strong",[t._v("（4）Minor GC 的平均晋升空间大小大于老年代可用空间")])]),t._v(" "),s("p",[t._v("如果发现统计数据说之前 Minor GC 的平均晋升大小比目前老年代剩余的空间大，则不会触发 Minor GC 而是转为触发 Full GC。")]),t._v(" "),s("p",[s("strong",[t._v("（5）对象大小大于 To 区和老年代的可用内存")])]),t._v(" "),s("p",[t._v("由 "),s("code",[t._v("Eden")]),t._v(" 区、"),s("code",[t._v("From")]),t._v(" 区向 "),s("code",[t._v("To")]),t._v(" 区复制时，对象大小大于 To 区可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。")]),t._v(" "),s("h2",{attrs:{id:"_5-参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-参考资料"}},[t._v("#")]),t._v(" 5. 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://book.douban.com/subject/34907497/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《深入理解 Java 虚拟机》"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.douban.com/doulist/2545443/",target:"_blank",rel:"noopener noreferrer"}},[t._v("从表到里学习 JVM 实现"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/coderlius/article/details/79272773",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解 JVM Garbage First(G1) 垃圾收集器"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/zhanggang807/article/details/45956325",target:"_blank",rel:"noopener noreferrer"}},[t._v("G1 垃圾收集器入门"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started with the G1 Garbage Collector"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);